package recfun
import common._

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int = ???

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = {

    def countDepth(depth: Int, chars: List[Char]): Int =
      if (chars.isEmpty) depth
      else if (depth < 0) depth
      else if (chars.head == '(') countDepth(depth + 1, chars.tail)
      else if (chars.head == ')') countDepth(depth - 1, chars.tail)
      else countDepth(depth, chars.tail)

    countDepth(0, chars) == 0
  }

  /**
   * Exercise 3
   */
   def countChange(money: Int, coins: List[Int]): Int = {

    def makeChange(remaining: Int, coins: List[Int]): Int =
      if (coins.isEmpty) remaining
      else if (remaining - coins.head >= 0) makeChange(remaining - coins.head, coins)
      else makeChange(remaining, coins.tail)

    def tryForChange(combosFound: Int, money: Int, coins: List[Int]): Int =
      if (coins.isEmpty) combosFound
      else if (makeChange(money, coins) == 0) tryForChange(combosFound + 1, money, coins.tail)
      else tryForChange(combosFound, money, coins.tail)

    tryForChange(0, money, coins.sortWith(_ > _))
  }

}
