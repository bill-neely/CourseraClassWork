package funsets

object Functions_Data_worksheet {
  println("Welcome to the Scala worksheet")

  val half = new Rational(1, 2)
  val twoFourths = new Rational(2, 4)
  val twoThirds = new Rational(2, 3)
  val two = new Rational(2)

  (half + twoThirds)
  (half - twoThirds)
  (half * twoThirds)
  (half / twoThirds)
  (half == twoThirds)
  (half == twoFourths)
  (half < twoThirds)
  (twoThirds < half)
  (half.max(twoThirds))
  (twoThirds.max(half))

  val x = new Rational(1, 3)
  val y = new Rational(5, 7)
  val z = new Rational(3, 2)
  x - y - z
  y + y
   
}

class Rational(x: Int, y: Int) {
  require(y != 0, "denominator must be nonzero")
  
  def this(x: Int) = this(x, 1)
  
  def numer = x
  def denom = y
  
  override def toString = {
    def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
    numer / gcd(numer, denom) + "/" + denom / gcd(numer, denom)
  }
  
  def unary_- : Rational = new Rational(-numer, denom)
  
  def +(that: Rational) =
    new Rational(this.numer * that.denom + that.numer * this.denom, this.denom * that.denom)
  
  def -(that: Rational) =
    this + -that
  
  def *(that: Rational) =
    new Rational(this.numer * that.numer, this.denom * that.denom)
  
  def /(that: Rational) =
    new Rational(this.numer * that.denom, this.denom * that.numer)
  
  def <(that: Rational) =
    (this.numer * that.denom < that.numer * this.denom)
  
  def ==(that: Rational) =
    (this.numer * that.denom == this.denom * that.numer)
  
  def max(that: Rational) = if (this < that) that else this
}
  